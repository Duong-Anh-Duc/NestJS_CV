import { MailerService } from '@nestjs-modules/mailer';
import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Cron } from '@nestjs/schedule';
import { Model } from 'mongoose';
import { JobsService } from 'src/jobs/jobs.service';
import { CRON_SCHEDULES } from './cron.config';
import { Subscriber, SubscriberDocument } from './schemas/subscriber.schema';

@Injectable()
export class EmailService {
    private readonly logger = new Logger(EmailService.name);

    constructor(
        private readonly mailerService: MailerService,
        private readonly jobsService: JobsService,
        @InjectModel(Subscriber.name) private subscriberModel: Model<SubscriberDocument>
    ) {}

    // Cronjob ch·∫°y m·ªói ng√†y l√∫c 8:00 s√°ng
    @Cron(CRON_SCHEDULES.DAILY_JOB_NOTIFICATION, {
        name: 'daily-job-notification',
        timeZone: CRON_SCHEDULES.TIMEZONE,
    })
    async handleDailyJobNotification() {
        this.logger.log('üïê B·∫Øt ƒë·∫ßu g·ª≠i email th√¥ng b√°o job h√†ng ng√†y...');
        
        try {
            // L·∫•y t·∫•t c·∫£ subscribers
            const subscribers = await this.subscriberModel.find({});
            
            if (subscribers.length === 0) {
                this.logger.warn('‚ö†Ô∏è  Kh√¥ng c√≥ subscribers n√†o trong database');
                return;
            }

            let totalEmailsSent = 0;

            // L·∫∑p qua t·ª´ng subscriber
            for (const subs of subscribers) {
                const subsSkills = subs.skills;
                
                // T√¨m jobs c√≥ skills tr√πng kh·ªõp v·ªõi subscriber
                const jobsData = await this.jobsService.findAll(1, 100, '');
                const jobWithMatchingSkills = jobsData.result.filter(job => 
                    job.skills && job.skills.some(skill => subsSkills.includes(skill))
                );

                if (jobWithMatchingSkills.length > 0) {
                    // Format jobs ƒë·ªÉ g·ª≠i email
                    const formattedJobs = jobWithMatchingSkills.map(job => ({
                        name: job.name,
                        company: { 
                            name: job.company?.name || 'Kh√¥ng c√≥ th√¥ng tin c√¥ng ty'
                        },
                        salary: job.salary ? `${job.salary.toLocaleString('vi-VN')} VND` : 'Th·ªèa thu·∫≠n',
                        location: job.location,
                        quantity: job.quantity,
                        level: job.level,
                        skills: job.skills || [],
                        endDate: job.endDate ? new Date(job.endDate).toLocaleDateString('vi-VN') : 'Kh√¥ng x√°c ƒë·ªãnh'
                    }));

                    // G·ª≠i email cho subscriber n√†y
                    await this.mailerService.sendMail({
                        to: subs.email,
                        from: "Job Portal <ducytcg123456@gmail.com>",
                        subject: `üéØ Jobs ph√π h·ª£p v·ªõi skills c·ªßa b·∫°n (${formattedJobs.length} v·ªã tr√≠) - ${new Date().toLocaleDateString('vi-VN')}`,
                        template: "new-job",
                        context: {
                            jobs: formattedJobs,
                            currentDate: new Date().toLocaleDateString('vi-VN'),
                            subscriberName: subs.name
                        }
                    });

                    totalEmailsSent++;
                    this.logger.log(`‚úÖ ƒê√£ g·ª≠i email cho ${subs.email} (${formattedJobs.length} jobs ph√π h·ª£p)`);
                } else {
                    this.logger.log(`‚ÑπÔ∏è  Kh√¥ng c√≥ job ph√π h·ª£p v·ªõi skills c·ªßa ${subs.email}`);
                }
            }

            this.logger.log(`üéâ Ho√†n th√†nh g·ª≠i email: ${totalEmailsSent}/${subscribers.length} subscribers nh·∫≠n ƒë∆∞·ª£c email`);
            
        } catch (error) {
            this.logger.error('‚ùå L·ªói khi g·ª≠i email t·ª± ƒë·ªông:', error);
        }
    }

    // Cronjob g·ª≠i email v√†o th·ª© 2 h√†ng tu·∫ßn l√∫c 9:00 s√°ng
    @Cron(CRON_SCHEDULES.WEEKLY_JOB_SUMMARY, {
        name: 'weekly-job-summary',
        timeZone: CRON_SCHEDULES.TIMEZONE,
    })
    async handleWeeklyJobSummary() {
        this.logger.log('üìÖ B·∫Øt ƒë·∫ßu g·ª≠i t·ªïng k·∫øt job h√†ng tu·∫ßn...');
        
        try {
            const subscribers = await this.subscriberModel.find({});
            
            if (subscribers.length === 0) {
                this.logger.warn('‚ö†Ô∏è  Kh√¥ng c√≥ subscribers n√†o ƒë·ªÉ g·ª≠i t·ªïng k·∫øt tu·∫ßn');
                return;
            }

            // L·∫•y t·∫•t c·∫£ jobs ƒë·ªÉ g·ª≠i t·ªïng k·∫øt
            const jobsData = await this.jobsService.findAll(1, 50, '');
            const allJobs = jobsData.result;

            if (allJobs.length === 0) {
                this.logger.warn('‚ö†Ô∏è  Kh√¥ng c√≥ jobs n√†o ƒë·ªÉ g·ª≠i t·ªïng k·∫øt');
                return;
            }

            const formattedJobs = allJobs.map(job => ({
                name: job.name,
                company: { 
                    name: job.company?.name || 'Kh√¥ng c√≥ th√¥ng tin c√¥ng ty'
                },
                salary: job.salary ? `${job.salary.toLocaleString('vi-VN')} VND` : 'Th·ªèa thu·∫≠n',
                location: job.location,
                quantity: job.quantity,
                level: job.level,
                skills: job.skills || [],
                endDate: job.endDate ? new Date(job.endDate).toLocaleDateString('vi-VN') : 'Kh√¥ng x√°c ƒë·ªãnh'
            }));

            let weeklyEmailsSent = 0;

            for (const subs of subscribers) {
                await this.mailerService.sendMail({
                    to: subs.email,
                    from: "Job Portal <ducytcg123456@gmail.com>",
                    subject: `üìä T·ªïng k·∫øt vi·ªác l√†m tu·∫ßn n√†y (${allJobs.length} v·ªã tr√≠)`,
                    template: "job",
                    context: {
                        jobs: formattedJobs,
                        currentDate: new Date().toLocaleDateString('vi-VN'),
                        subscriberName: subs.name
                    }
                });

                weeklyEmailsSent++;
                this.logger.log(`‚úÖ ƒê√£ g·ª≠i t·ªïng k·∫øt tu·∫ßn cho ${subs.email}`);
            }

            this.logger.log(`üéâ Ho√†n th√†nh g·ª≠i t·ªïng k·∫øt tu·∫ßn: ${weeklyEmailsSent} emails`);
            
        } catch (error) {
            this.logger.error('‚ùå L·ªói khi g·ª≠i t·ªïng k·∫øt tu·∫ßn:', error);
        }
    }

    // Method ƒë·ªÉ g·ª≠i email th·ªß c√¥ng (gi·ªØ nguy√™n ch·ª©c nƒÉng c≈©)
    async sendJobNotificationManually() {
        this.logger.log('üîß G·ª≠i email th·ªß c√¥ng...');
        
        try {
            // L·∫•y t·∫•t c·∫£ subscribers
            const subscribers = await this.subscriberModel.find({});
            
            if (subscribers.length === 0) {
                return {
                    message: "Kh√¥ng c√≥ subscribers n√†o trong database",
                    subscribersCount: 0,
                    emailsSent: 0
                };
            }

            let totalEmailsSent = 0;

            // L·∫∑p qua t·ª´ng subscriber
            for (const subs of subscribers) {
                const subsSkills = subs.skills;
                
                // T√¨m jobs c√≥ skills tr√πng kh·ªõp v·ªõi subscriber
                const jobsData = await this.jobsService.findAll(1, 100, '');
                const jobWithMatchingSkills = jobsData.result.filter(job => 
                    job.skills && job.skills.some(skill => subsSkills.includes(skill))
                );

                if (jobWithMatchingSkills.length > 0) {
                    // Format jobs ƒë·ªÉ g·ª≠i email
                    const formattedJobs = jobWithMatchingSkills.map(job => ({
                        name: job.name,
                        company: { 
                            name: job.company?.name || 'Kh√¥ng c√≥ th√¥ng tin c√¥ng ty'
                        },
                        salary: job.salary ? `${job.salary.toLocaleString('vi-VN')} VND` : 'Th·ªèa thu·∫≠n',
                        location: job.location,
                        quantity: job.quantity,
                        level: job.level,
                        skills: job.skills || [],
                        endDate: job.endDate ? new Date(job.endDate).toLocaleDateString('vi-VN') : 'Kh√¥ng x√°c ƒë·ªãnh'
                    }));

                    // G·ª≠i email cho subscriber n√†y
                    await this.mailerService.sendMail({
                        to: subs.email,
                        from: "Job Portal <ducytcg123456@gmail.com>",
                        subject: `üéØ Jobs ph√π h·ª£p v·ªõi skills c·ªßa b·∫°n (${formattedJobs.length} v·ªã tr√≠) - Th·ªß c√¥ng`,
                        template: "new-job",
                        context: {
                            jobs: formattedJobs,
                            currentDate: new Date().toLocaleDateString('vi-VN'),
                            subscriberName: subs.name
                        }
                    });

                    totalEmailsSent++;
                    this.logger.log(`‚úÖ ƒê√£ g·ª≠i email cho ${subs.email} (${formattedJobs.length} jobs ph√π h·ª£p)`);
                }
            }

            const result = {
                message: `ƒê√£ g·ª≠i email cho ${totalEmailsSent}/${subscribers.length} subscribers c√≥ jobs ph√π h·ª£p`,
                subscribersCount: subscribers.length,
                emailsSent: totalEmailsSent
            };

            this.logger.log(`üéâ Ho√†n th√†nh g·ª≠i email th·ªß c√¥ng: ${totalEmailsSent}/${subscribers.length} subscribers`);
            return result;
            
        } catch (error) {
            this.logger.error('‚ùå L·ªói khi g·ª≠i email th·ªß c√¥ng:', error);
            throw error;
        }
    }
}
