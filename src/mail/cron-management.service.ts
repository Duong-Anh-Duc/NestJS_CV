import { Injectable, Logger } from '@nestjs/common';
import { SchedulerRegistry } from '@nestjs/schedule';
import { CronJob } from 'cron';
import { CRON_SCHEDULES } from './cron.config';

@Injectable()
export class CronManagementService {
    private readonly logger = new Logger(CronManagementService.name);

    constructor(private schedulerRegistry: SchedulerRegistry) {}

    // L·∫•y tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ cronjobs
    getCronJobsStatus() {
        const jobs = this.schedulerRegistry.getCronJobs();
        const status = {};

        jobs.forEach((value: CronJob, key: string) => {
            let next;
            try {
                next = value.nextDate().toJSDate();
            } catch (e) {
                next = 'error - no next date';
            }

            status[key] = {
                running: value.running,
                nextRun: next,
                lastRun: value.lastDate() || 'never'
            };
        });

        return {
            jobs: status,
            totalJobs: jobs.size
        };
    }

    // B·∫≠t cronjob
    startCronJob(jobName: string) {
        try {
            const job = this.schedulerRegistry.getCronJob(jobName);
            if (!job.running) {
                job.start();
                this.logger.log(`‚úÖ ƒê√£ b·∫≠t cronjob: ${jobName}`);
                return { success: true, message: `Cronjob ${jobName} ƒë√£ ƒë∆∞·ª£c b·∫≠t` };
            } else {
                return { success: false, message: `Cronjob ${jobName} ƒë√£ ƒëang ch·∫°y` };
            }
        } catch (error) {
            this.logger.error(`‚ùå L·ªói khi b·∫≠t cronjob ${jobName}:`, error);
            return { success: false, message: `Kh√¥ng t√¨m th·∫•y cronjob ${jobName}` };
        }
    }

    // T·∫Øt cronjob
    stopCronJob(jobName: string) {
        try {
            const job = this.schedulerRegistry.getCronJob(jobName);
            if (job.running) {
                job.stop();
                this.logger.log(`‚èπÔ∏è  ƒê√£ t·∫Øt cronjob: ${jobName}`);
                return { success: true, message: `Cronjob ${jobName} ƒë√£ ƒë∆∞·ª£c t·∫Øt` };
            } else {
                return { success: false, message: `Cronjob ${jobName} ƒë√£ ƒë∆∞·ª£c t·∫Øt t·ª´ tr∆∞·ªõc` };
            }
        } catch (error) {
            this.logger.error(`‚ùå L·ªói khi t·∫Øt cronjob ${jobName}:`, error);
            return { success: false, message: `Kh√¥ng t√¨m th·∫•y cronjob ${jobName}` };
        }
    }

    // Ch·∫°y cronjob ngay l·∫≠p t·ª©c
    runCronJobNow(jobName: string) {
        try {
            const job = this.schedulerRegistry.getCronJob(jobName);
            job.fireOnTick();
            this.logger.log(`üöÄ ƒê√£ ch·∫°y cronjob ngay: ${jobName}`);
            return { success: true, message: `ƒê√£ ch·∫°y cronjob ${jobName} ngay l·∫≠p t·ª©c` };
        } catch (error) {
            this.logger.error(`‚ùå L·ªói khi ch·∫°y cronjob ${jobName}:`, error);
            return { success: false, message: `Kh√¥ng th·ªÉ ch·∫°y cronjob ${jobName}` };
        }
    }

    // X√≥a v√† t·∫°o l·∫°i cronjob v·ªõi l·ªãch tr√¨nh m·ªõi
    updateCronSchedule(jobName: string, newSchedule: string) {
        try {
            const existingJob = this.schedulerRegistry.getCronJob(jobName);
            const wasRunning = existingJob.running;
            
            // X√≥a cronjob c≈©
            this.schedulerRegistry.deleteCronJob(jobName);
            
            // T·∫°o cronjob m·ªõi v·ªõi l·ªãch tr√¨nh m·ªõi
            const newJob = new CronJob(newSchedule, () => {
                this.logger.log(`üïê Ch·∫°y cronjob v·ªõi l·ªãch tr√¨nh m·ªõi: ${jobName}`);
                // G·ªçi function t∆∞∆°ng ·ª©ng
                existingJob.fireOnTick();
            }, null, wasRunning, CRON_SCHEDULES.TIMEZONE);
            
            this.schedulerRegistry.addCronJob(jobName, newJob);
            
            this.logger.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t l·ªãch tr√¨nh cho cronjob ${jobName}: ${newSchedule}`);
            return { 
                success: true, 
                message: `ƒê√£ c·∫≠p nh·∫≠t l·ªãch tr√¨nh cho cronjob ${jobName}`,
                newSchedule: newSchedule
            };
        } catch (error) {
            this.logger.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t cronjob ${jobName}:`, error);
            return { success: false, message: `Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t cronjob ${jobName}` };
        }
    }
}
